import streamlit as st
st.set_page_config(page_title="Product Description Generator", layout="centered")

import openai
import os
import base64
from dotenv import load_dotenv
from PIL import Image

# Load environment variables
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

st.title("üõçÔ∏è AI Product Description Generator")

st.markdown("""
Upload a product image or paste product info, and let AI generate:
- A catchy product title
- An engaging description
- SEO bullet points
""")

# Function to convert image to base64 string
def image_to_base64(image: Image.Image):
    from io import BytesIO
    buffered = BytesIO()
    image.save(buffered, format="JPEG")
    return base64.b64encode(buffered.getvalue()).decode()

# Image upload section
uploaded_image = st.file_uploader("üñºÔ∏è Upload a product image (optional)", type=["jpg", "jpeg", "png"])
image_caption = ""
if uploaded_image is not None:
    image = Image.open(uploaded_image).convert("RGB")
    st.image(image, caption="Uploaded Product Image", use_column_width=True)
    with st.spinner("üîç Analyzing image with GPT-4 Vision..."):
        b64_image = image_to_base64(image)
        try:
            vision_response = openai.ChatCompletion.create(
                model="gpt-4-turbo-2024-04-09",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Describe this product as if it's for an e-commerce listing."},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{b64_image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=300
            )
            image_caption = vision_response["choices"][0]["message"]["content"]
            st.success("üß† Caption generated by GPT-4 Vision:")
            st.info(image_caption)
        except Exception as e:
            st.error(f"‚ö†Ô∏è GPT-4 Vision error: {e}")

# Product info input
product_input = st.text_area("üìù Enter your product details (name, features, specs):", value=image_caption, height=150)
tone = st.selectbox("üéØ Choose a tone/style", ["Professional", "Friendly", "Luxury", "Witty", "Minimal"])

if st.button("‚ú® Generate Description"):
    if not product_input.strip():
        st.warning("Please enter some product info.")
    else:
        with st.spinner("Generating with GPT-4..."):
            prompt = f"""
You are an expert e-commerce copywriter. Based on the following product info, write:
1. A catchy product title
2. A 2‚Äì3 line engaging product description
3. 4-5 bullet points highlighting benefits

Tone: {tone}

Product Info:
{product_input.strip()}

Return in Markdown format with clear sections.
"""
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                content = response["choices"][0]["message"]["content"]
                st.markdown("---")
                st.markdown(content)
            except Exception as e:
                st.error(f"‚ö†Ô∏è OpenAI error: {str(e)}")
